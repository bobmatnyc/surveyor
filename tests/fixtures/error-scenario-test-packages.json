{
  "metadata": {
    "version": "1.0.0",
    "created": "2025-07-11T00:00:00.000Z",
    "description": "Error scenario test packages for comprehensive error handling testing",
    "author": "QA Agent",
    "errorCategories": [
      "validation-errors",
      "not-found-errors",
      "authentication-errors",
      "server-errors",
      "malformed-requests",
      "rate-limiting"
    ]
  },
  "errorScenarios": {
    "validationErrors": {
      "missingRequiredFields": {
        "description": "Request missing required fields",
        "scenario": "survey_step_submit",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "test-org",
          "stepId": "step-1",
          "responses": {}
        },
        "expectedError": {
          "code": "VALIDATION_ERROR",
          "status": 400,
          "message": "Missing required fields",
          "details": {
            "missingFields": ["q1", "q2"]
          }
        }
      },
      "invalidFieldTypes": {
        "description": "Request with invalid field types",
        "scenario": "survey_step_submit",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "test-org",
          "stepId": "step-1",
          "responses": {
            "q1": 123,
            "q2": "invalid-option",
            "q3": "not-a-number"
          }
        },
        "expectedError": {
          "code": "VALIDATION_ERROR",
          "status": 400,
          "message": "Invalid field types",
          "details": {
            "invalidFields": {
              "q1": "Expected string, got number",
              "q2": "Invalid option selected",
              "q3": "Expected number, got string"
            }
          }
        }
      },
      "exceedingLimits": {
        "description": "Request exceeding validation limits",
        "scenario": "survey_step_submit",
        "testData": {
          "surveyId": "test-validation-limits",
          "stakeholderId": "validation-user",
          "organizationId": "test-org",
          "stepId": "step-1",
          "responses": {
            "min-length-text": "abc",
            "max-length-text": "this-text-is-too-long-for-the-limit",
            "number-min-max": 150,
            "pattern-validation": "invalid-email"
          }
        },
        "expectedError": {
          "code": "VALIDATION_ERROR",
          "status": 422,
          "message": "Validation failed",
          "details": {
            "validationErrors": [
              {
                "field": "min-length-text",
                "message": "Minimum length is 5 characters"
              },
              {
                "field": "max-length-text",
                "message": "Maximum length is 10 characters"
              },
              {
                "field": "number-min-max",
                "message": "Value must be between 1 and 100"
              },
              {
                "field": "pattern-validation",
                "message": "Invalid email format"
              }
            ]
          }
        }
      }
    },
    "notFoundErrors": {
      "invalidSurveyId": {
        "description": "Request with non-existent survey ID",
        "scenario": "survey_metadata",
        "testData": {
          "surveyId": "non-existent-survey-id",
          "organizationId": "test-org"
        },
        "expectedError": {
          "code": "SURVEY_NOT_FOUND",
          "status": 404,
          "message": "Survey not found",
          "details": {
            "surveyId": "non-existent-survey-id"
          }
        }
      },
      "invalidStakeholderId": {
        "description": "Request with non-existent stakeholder ID",
        "scenario": "stakeholder_selection",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "non-existent-stakeholder",
          "organizationId": "test-org"
        },
        "expectedError": {
          "code": "STAKEHOLDER_NOT_FOUND",
          "status": 404,
          "message": "Stakeholder not found",
          "details": {
            "stakeholderId": "non-existent-stakeholder"
          }
        }
      },
      "invalidOrganizationId": {
        "description": "Request with non-existent organization ID",
        "scenario": "survey_step",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "non-existent-org",
          "stepId": "step-1"
        },
        "expectedError": {
          "code": "INVALID_ORGANIZATION_ID",
          "status": 404,
          "message": "Organization not found",
          "details": {
            "organizationId": "non-existent-org"
          }
        }
      },
      "invalidStepId": {
        "description": "Request with non-existent step ID",
        "scenario": "survey_step",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "test-org",
          "stepId": "non-existent-step"
        },
        "expectedError": {
          "code": "STEP_NOT_FOUND",
          "status": 404,
          "message": "Survey step not found",
          "details": {
            "stepId": "non-existent-step"
          }
        }
      }
    },
    "authenticationErrors": {
      "missingAuthToken": {
        "description": "Request without authentication token",
        "scenario": "admin_survey_list",
        "testData": {},
        "requestHeaders": {},
        "expectedError": {
          "code": "UNAUTHORIZED",
          "status": 401,
          "message": "Authentication required",
          "details": {
            "reason": "Missing authentication token"
          }
        }
      },
      "invalidAuthToken": {
        "description": "Request with invalid authentication token",
        "scenario": "admin_survey_list",
        "testData": {},
        "requestHeaders": {
          "Authorization": "Bearer invalid-token"
        },
        "expectedError": {
          "code": "UNAUTHORIZED",
          "status": 401,
          "message": "Invalid authentication token",
          "details": {
            "reason": "Token verification failed"
          }
        }
      },
      "expiredAuthToken": {
        "description": "Request with expired authentication token",
        "scenario": "admin_survey_list",
        "testData": {},
        "requestHeaders": {
          "Authorization": "Bearer expired-token"
        },
        "expectedError": {
          "code": "UNAUTHORIZED",
          "status": 401,
          "message": "Authentication token expired",
          "details": {
            "reason": "Token has expired"
          }
        }
      },
      "insufficientPermissions": {
        "description": "Request with insufficient permissions",
        "scenario": "admin_survey_create",
        "testData": {
          "name": "Test Survey",
          "description": "Test"
        },
        "requestHeaders": {
          "Authorization": "Bearer read-only-token"
        },
        "expectedError": {
          "code": "FORBIDDEN",
          "status": 403,
          "message": "Insufficient permissions",
          "details": {
            "requiredPermission": "survey:create",
            "userPermissions": ["survey:read"]
          }
        }
      }
    },
    "malformedRequests": {
      "invalidJson": {
        "description": "Request with malformed JSON",
        "scenario": "survey_step_submit",
        "testData": "{invalid json}",
        "expectedError": {
          "code": "INVALID_REQUEST_BODY",
          "status": 400,
          "message": "Invalid JSON format",
          "details": {
            "parseError": "Unexpected token 'i' in JSON at position 1"
          }
        }
      },
      "missingContentType": {
        "description": "Request missing Content-Type header",
        "scenario": "survey_step_submit",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "test-org"
        },
        "requestHeaders": {},
        "expectedError": {
          "code": "INVALID_REQUEST_BODY",
          "status": 400,
          "message": "Content-Type header required",
          "details": {
            "requiredHeader": "Content-Type: application/json"
          }
        }
      },
      "invalidContentType": {
        "description": "Request with invalid Content-Type",
        "scenario": "survey_step_submit",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "test-org"
        },
        "requestHeaders": {
          "Content-Type": "text/plain"
        },
        "expectedError": {
          "code": "INVALID_REQUEST_BODY",
          "status": 400,
          "message": "Invalid Content-Type",
          "details": {
            "received": "text/plain",
            "expected": "application/json"
          }
        }
      },
      "oversizedRequest": {
        "description": "Request exceeding size limits",
        "scenario": "survey_step_submit",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "test-org",
          "responses": {
            "q1": "x".repeat(10000)
          }
        },
        "expectedError": {
          "code": "REQUEST_TOO_LARGE",
          "status": 413,
          "message": "Request entity too large",
          "details": {
            "maxSize": "1MB",
            "receivedSize": "10KB"
          }
        }
      }
    },
    "serverErrors": {
      "databaseConnectionError": {
        "description": "Database connection failure",
        "scenario": "survey_metadata",
        "testData": {
          "surveyId": "test-comprehensive",
          "organizationId": "test-org"
        },
        "simulatedError": "database_connection_failure",
        "expectedError": {
          "code": "INTERNAL_ERROR",
          "status": 500,
          "message": "Internal server error",
          "details": {
            "errorId": "db-conn-001",
            "timestamp": "2025-07-11T00:00:00.000Z"
          }
        }
      },
      "serviceUnavailable": {
        "description": "Service temporarily unavailable",
        "scenario": "survey_step_submit",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "test-org"
        },
        "simulatedError": "service_unavailable",
        "expectedError": {
          "code": "SERVICE_UNAVAILABLE",
          "status": 503,
          "message": "Service temporarily unavailable",
          "details": {
            "retryAfter": 300,
            "reason": "Maintenance mode"
          }
        }
      },
      "timeoutError": {
        "description": "Request timeout",
        "scenario": "survey_step_submit",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "test-org"
        },
        "simulatedError": "timeout",
        "expectedError": {
          "code": "TIMEOUT",
          "status": 504,
          "message": "Request timeout",
          "details": {
            "timeoutAfter": "30s"
          }
        }
      }
    },
    "rateLimiting": {
      "tooManyRequests": {
        "description": "Rate limit exceeded",
        "scenario": "survey_step_submit",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "test-org"
        },
        "simulatedError": "rate_limit_exceeded",
        "expectedError": {
          "code": "TOO_MANY_REQUESTS",
          "status": 429,
          "message": "Rate limit exceeded",
          "details": {
            "limit": 100,
            "remaining": 0,
            "resetTime": "2025-07-11T01:00:00.000Z",
            "retryAfter": 3600
          }
        }
      },
      "concurrentRequestLimit": {
        "description": "Concurrent request limit exceeded",
        "scenario": "survey_step_submit",
        "testData": {
          "surveyId": "test-comprehensive",
          "stakeholderId": "ceo",
          "organizationId": "test-org"
        },
        "simulatedError": "concurrent_limit_exceeded",
        "expectedError": {
          "code": "TOO_MANY_REQUESTS",
          "status": 429,
          "message": "Concurrent request limit exceeded",
          "details": {
            "concurrentLimit": 10,
            "currentConcurrent": 10,
            "retryAfter": 5
          }
        }
      }
    }
  },
  "testUtilities": {
    "errorTestHelpers": {
      "validateErrorResponse": {
        "description": "Validates error response format",
        "requiredFields": ["error", "message", "code"],
        "optionalFields": ["details", "timestamp", "requestId"]
      },
      "errorCodeMappings": {
        "VALIDATION_ERROR": [400, 422],
        "UNAUTHORIZED": [401],
        "FORBIDDEN": [403],
        "NOT_FOUND": [404],
        "METHOD_NOT_ALLOWED": [405],
        "CONFLICT": [409],
        "TOO_MANY_REQUESTS": [429],
        "INTERNAL_ERROR": [500],
        "SERVICE_UNAVAILABLE": [503],
        "TIMEOUT": [504]
      },
      "retryableErrors": [
        "SERVICE_UNAVAILABLE",
        "TIMEOUT",
        "TOO_MANY_REQUESTS",
        "INTERNAL_ERROR"
      ],
      "nonRetryableErrors": [
        "VALIDATION_ERROR",
        "UNAUTHORIZED",
        "FORBIDDEN",
        "NOT_FOUND",
        "METHOD_NOT_ALLOWED",
        "CONFLICT"
      ]
    }
  }
}